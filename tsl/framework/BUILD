# Description:
#   Tensor Standard Libraries.
#
#   The libraries in this package are not allowed to have ANY dependencies
#   to other TF components outside of TSL.

load("//third_party/tensorflow:tensorflow.default.bzl", "filegroup", "get_compatible_with_portable")
load(
    "//tsl/platform:build_config_root.bzl",
    "if_static",
)
load(
    "//tsl/platform:rules_cc.bzl",
    "cc_library",
)
load(
    "//tsl/platform:build_config.bzl",
    "tsl_cc_test",
)

package(
    default_visibility = [
        "//visibility:public",
    ],
    licenses = ["notice"],
)

filegroup(
    name = "framework_internal_impl_srcs",
    srcs = [
        "metrics.cc",
    ],
)

# Files needed for core:framework_internal_impl.
filegroup(
    name = "framework_internal_private_hdrs",
    srcs = [
        "allocator.h",
        "allocator_registry.h",
        "cancellation.h",
        "device_type.h",
        "fixedpoint_types.h",
        "metrics.h",
        "numeric_types.h",
        "tracking_allocator.h",
        "type_traits.h",
    ],
)

# Files needed for core:mobile_srcs_no_runtime.
filegroup(
    name = "mobile_srcs_no_runtime",
    srcs = [
        "allocator.cc",
        "allocator.h",
        "allocator_registry.cc",
        "allocator_registry.h",
        "cpu_allocator_impl.cc",
        "device_type.h",
        "fixedpoint_types.h",
        "numeric_types.h",
        "tracking_allocator.cc",
        "tracking_allocator.h",
        "type_traits.h",
    ],
)

# Files needed for core:mobile_srcs_only_runtime.
filegroup(
    name = "mobile_srcs_only_runtime",
    srcs = [
        "cancellation.cc",
        "cancellation.h",
        "fixedpoint_types.h",
        "metrics.cc",
        "metrics.h",
    ],
)

filegroup(
    name = "allocator_hdrs",
    srcs = [
        "allocator.h",
        "allocator_registry.h",
        "fixedpoint_types.h",
        "numeric_types.h",
        "tracking_allocator.h",
        "type_traits.h",
    ],
    visibility = ["//third_party/tensorflow/core:__subpackages__"],
)

# Files needed for tf2xla build.
filegroup(
    name = "xla_cpu_runtime_hdrs",
    srcs = ["fixedpoint_types.h"],
)

# Individual targets. These should be preferred over tensorflow/core:framework
# whenever possible.

# This is redundant with the "tensorflow/core:framework" target. It's useful for
# applications that want to depend on a minimal subset of TensorFlow (e.g. XLA).
cc_library(
    name = "allocator",
    srcs = [
        "allocator.cc",
        "allocator_registry.h",
        "tracking_allocator.cc",
        "tracking_allocator.h",
    ],
    hdrs = [
        "allocator.h",
    ],
    features = ["parse_headers"],
    visibility = ["//visibility:public"],
    deps = [
        ":numeric_types",
        ":type_traits",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ] + if_static(
        extra_deps = [
            ":allocator_registry_impl",
            "//tsl/lib/gtl:inlined_vector",
            "//tsl/platform:strcat",
            "//tsl/platform:stringprintf",
            "//tsl/platform:env",
            "//tsl/platform:env_impl",
            "//tsl/platform:logging",
            "//tsl/platform:macros",
            "//tsl/platform:mutex",
            "//tsl/platform:platform_port",
            "//tsl/platform:thread_annotations",
            "//tsl/platform:types",
        ],
        otherwise = [
            "//tsl/lib/gtl:inlined_vector",
            "//tsl/platform:logging",
            "//tsl/platform:platform_port",
            "//tsl/platform:strcat",
            "//tsl/platform:env",
        ],
    ),
    alwayslink = 1,
)

# This target will be included in libtensorflow_framework.so via the
# framework_internal_impl target.
# All other dependencies on this target need to go through if_static guard,
# as otherwise duplicate registration in the registry will cause crashes.
cc_library(
    name = "allocator_registry_impl",
    srcs = [
        "allocator.h",
        "allocator_registry.cc",
        "allocator_registry.h",
        "cpu_allocator_impl.cc",
        "tracking_allocator.h",
    ],
    visibility = [
        "//third_party/tensorflow/core:__subpackages__",
        "//tsl:__subpackages__",
    ],
    deps = [
        ":numeric_types",
        ":type_traits",
        "//third_party/tensorflow/core/profiler/lib:scoped_memory_debug_annotation",
        "//tsl/lib/gtl:inlined_vector",
        "//tsl/platform:logging",
        "//tsl/platform:macros",
        "//tsl/platform:mutex",
        "//tsl/platform:platform_port",
        "//tsl/platform:strcat",
        "//tsl/platform:stringprintf",
        "//tsl/platform:thread_annotations",
        "//tsl/platform:types",
        "//tsl/profiler/lib:traceme",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
    alwayslink = 1,
)

cc_library(
    name = "bfc_allocator",
    srcs = [
        "allocator_retry.cc",
        "allocator_retry.h",
        "bfc_allocator.cc",
        # metric is provided by libtensorflow_framework right now, including the
        # header here avoids to depend directly on the metric library, which
        # would lead to duplicated symbols later. The migration to cc_shared_library
        # should clean this all up.
        "metrics.h",
    ],
    hdrs = ["bfc_allocator.h"],
    features = ["parse_headers"],
    visibility = ["//visibility:public"],
    deps = [
        ":allocator",
        ":shared_counter",
        "//third_party/tensorflow/core:protos_all_cc",
        "//third_party/tensorflow/core/profiler/lib:scoped_memory_debug_annotation",
        "//tsl/lib/core:bits",
        "//tsl/lib/monitoring:counter",
        "//tsl/lib/monitoring:gauge",
        "//tsl/platform:env",
        "//tsl/platform:logging",
        "//tsl/platform:macros",
        "//tsl/platform:mutex",
        "//tsl/platform:numbers",
        "//tsl/platform:statusor",
        "//tsl/platform:str_util",
        "//tsl/platform:strcat",
        "//tsl/platform:thread_annotations",
        "//tsl/platform:types",
        "//tsl/profiler/lib:traceme",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/types:optional",
    ],
)

cc_library(
    name = "device_type",
    srcs = ["device_type.cc"],
    hdrs = ["device_type.h"],
    compatible_with = get_compatible_with_portable(),
    visibility = ["//visibility:public"],
    deps = [
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "device_id",
    textual_hdrs = [
        "device_id.h",
        "device_id_manager.h",
    ],
    deps = [
        "//tsl/platform:types",
    ] + if_static([
        ":device_id_impl",
    ]),
)

cc_library(
    name = "device_id_impl",
    srcs = ["device_id_manager.cc"],
    hdrs = [
        "device_id.h",
        "device_id_manager.h",
    ],
    deps = [
        ":device_type",
        "//tsl/lib/gtl:int_type",
        "//tsl/platform:errors",
        "//tsl/platform:logging",
        "//tsl/platform:macros",
        "//tsl/platform:mutex",
        "//tsl/platform:status",
        "//tsl/platform:types",
    ],
)

filegroup(
    name = "device_runtime_headers",
    srcs = [
        "device_id.h",
        "device_id_manager.h",
    ],
)

cc_library(
    name = "numeric_types",
    hdrs = ["numeric_types.h"],
    visibility = [
        "//third_party/tensorflow/compiler:__subpackages__",
        "//third_party/tensorflow/core:__subpackages__",
    ],
    deps = [
        ":fixedpoint_types",
        "//tsl/platform:types",
    ],
)

cc_library(
    name = "shared_counter",
    hdrs = ["shared_counter.h"],
    features = ["parse_headers"],
    visibility = ["//visibility:public"],
    deps = [
        "//tsl/platform:types",
    ],
)

cc_library(
    name = "metrics",
    srcs = ["metrics.cc"],
    hdrs = ["metrics.h"],
    deps = [
        "//third_party/tensorflow/core:protos_all_cc",
        "//third_party/tensorflow/core/protobuf:for_core_protos_cc",
        "//tsl/lib/monitoring:counter",
        "//tsl/lib/monitoring:gauge",
        "//tsl/lib/monitoring:sampler",
        "//tsl/platform:env",
        "//tsl/platform:statusor",
        "//tsl/platform:types",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "fixedpoint_types",
    hdrs = ["fixedpoint_types.h"],
    compatible_with = get_compatible_with_portable(),
    visibility = ["//visibility:public"],
    deps = [
        "//third_party/eigen3",
    ],
)

cc_library(
    name = "type_traits",
    hdrs = ["type_traits.h"],
    visibility = [
        "//third_party/tensorflow/core/framework:__pkg__",
    ],
    deps = [
        ":numeric_types",
        "//tsl/platform:types",
    ],
)

filegroup(
    name = "cancellation_hdrs",
    srcs = [
        "cancellation.h",
    ],
    visibility = ["//third_party/tensorflow/core:__subpackages__"],
)

cc_library(
    name = "cancellation",
    srcs = [
        "cancellation.cc",
    ],
    hdrs = [
        "cancellation.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//tsl/lib/gtl:flatmap",
        "//tsl/platform:errors",
        "//tsl/platform:hash",
        "//tsl/platform:logging",
        "//tsl/platform:mutex",
        "//tsl/platform:notification",
        "//tsl/platform:status",
        "//tsl/platform:stringpiece",
        "//tsl/platform:thread_annotations",
        "//tsl/platform:types",
        "@com_google_absl//absl/memory",
    ],
)

tsl_cc_test(
    name = "cancellation_test",
    size = "small",
    srcs = ["cancellation_test.cc"],
    deps = [
        ":cancellation",
        "//tsl/platform:env",
        "//tsl/platform:env_impl",
        "//tsl/platform:notification",
        "//tsl/platform:status",
        "//tsl/platform:test",
        "//tsl/platform:test_main",
    ],
)

# Export all header files for which we do not yet provide a dedicated build
# rule. This avoids breaking all the rules in tensorflow/core/BUILD.
exports_files(
    srcs = [
        "allocator_registry.h",
        "allocator_retry.cc",
        "allocator_retry.h",
        "bfc_allocator.cc",
        "bfc_allocator.h",
        "device_type.h",
        "metrics.h",
        "shared_counter.h",
        "tracking_allocator.h",
    ],
    visibility = [
        "//third_party/tensorflow/core:__pkg__",
        "//third_party/tensorflow/core/common_runtime:__pkg__",
        "//third_party/tensorflow/core/common_runtime/gpu:__pkg__",
        "//third_party/tensorflow/core/framework:__pkg__",
    ],
)

# Files whose users still need to be migrated from core:framework to the
# above targets.
# TODO(gonnet): Remove these files once targets depending on them have
# been cleaned up.
exports_files(
    srcs = [
        "allocator.h",
        "cancellation.h",
        "numeric_types.h",
        "type_traits.h",
    ],
)
