Auto generated patch. Do not edit or delete it, even if empty.
diff -ruN --strip-trailing-cr a/lld/ELF/Config.h b/lld/ELF/Config.h
--- a/lld/ELF/Config.h
+++ b/lld/ELF/Config.h
@@ -619,7 +619,6 @@
   };
   ElfSym sym{};
   std::unique_ptr<SymbolTable> symtab;
-  SmallVector<Symbol *, 0> synthesizedSymbols;
 
   SmallVector<std::unique_ptr<MemoryBuffer>> memoryBuffers;
   SmallVector<ELFFileBase *, 0> objectFiles;
diff -ruN --strip-trailing-cr a/lld/ELF/Writer.cpp b/lld/ELF/Writer.cpp
--- a/lld/ELF/Writer.cpp
+++ b/lld/ELF/Writer.cpp
@@ -149,7 +149,6 @@
   if (!s || s->isDefined() || s->isCommon())
     return nullptr;
 
-  ctx.synthesizedSymbols.push_back(s);
   s->resolve(ctx, Defined{ctx, ctx.internalFile, StringRef(), STB_GLOBAL,
                           stOther, STT_NOTYPE, val,
                           /*size=*/0, sec});
@@ -283,7 +282,6 @@
 static void demoteSymbolsAndComputeIsPreemptible(Ctx &ctx) {
   llvm::TimeTraceScope timeScope("Demote symbols");
   DenseMap<InputFile *, DenseMap<SectionBase *, size_t>> sectionIndexMap;
-  bool hasDynSymTab = ctx.arg.hasDynSymTab;
   for (Symbol *sym : ctx.symtab->getSymbols()) {
     if (auto *d = dyn_cast<Defined>(sym)) {
       if (d->section && !d->section->isLive())
@@ -296,12 +294,11 @@
                   sym->type)
             .overwrite(*sym);
         sym->versionId = VER_NDX_GLOBAL;
-        if (sym->includeInDynsym(ctx))
-          sym->isExported = true;
       }
     }
 
-    if (hasDynSymTab)
+    sym->isExported = sym->includeInDynsym(ctx);
+    if (ctx.arg.hasDynSymTab)
       sym->isPreemptible = sym->isExported && computeIsPreemptible(ctx, *sym);
   }
 }
@@ -1839,11 +1836,6 @@
     }
   }
 
-  // If the previous code block defines any non-hidden symbols (e.g.
-  // __global_pointer$), they may be exported.
-  for (Symbol *sym : ctx.synthesizedSymbols)
-    sym->isExported = sym->includeInDynsym(ctx);
-
   demoteSymbolsAndComputeIsPreemptible(ctx);
 
   if (ctx.arg.copyRelocs && ctx.arg.discard != DiscardPolicy::None)
